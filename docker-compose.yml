version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: pos_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-posuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pospassword}
      POSTGRES_DB: ${DB_NAME:-posdb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - pos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-posuser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pos_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: pos_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pos_api
    environment:
      APP_ENV: ${APP_ENV:-development}
      APP_PORT: ${APP_PORT:-8080}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-posuser}
      DB_PASSWORD: ${DB_PASSWORD:-pospassword}
      DB_NAME: ${DB_NAME:-posdb}
      DB_SSLMODE: disable
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin}@rabbitmq:5672/
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS:-24}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - pos_network
    volumes:
      - ./configs:/app/configs
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: pos_migrate
    command: go run cmd/migration/main.go up
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-posuser}
      DB_PASSWORD: ${DB_PASSWORD:-pospassword}
      DB_NAME: ${DB_NAME:-posdb}
      DB_SSLMODE: disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pos_network
    profiles:
      - migration

networks:
  pos_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: